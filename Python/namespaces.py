from Equation import Namespace, Unit
from equationModifiers import *


physics = Namespace('physics',
    Unit('a',    'acceleration', 'meters/second^2').generateVariant(),
    Unit('v',    'velocity', 'meters/second').generateVariant(),
    Unit('r',    'radius', 'meters'),
    Unit('angA', 'angular acceleration', 'radians/second^2').generateVariant(),
    Unit('angV', 'angular velocity', 'radians/second', {'wThing', 'ohmega'}).generateVariant(),
    Unit('angs', 'angular speed', 'radians/second', {'aThing', 'alpha'}).generateVariant(),
    Unit('dangs' 'delta anglular speed', 'radians/second').generateVariant(),
    Unit('dang', 'delta angle', 'radians').generateVariant(),
    Unit('dt',   'delta time', 'seconds'),
    Unit('w',    'weight', 'Newtons'),
    Unit('W',    'work', 'Joules').generateVariant(),
    Unit('m',    'mass', 'kilograms'),
    Unit('b',    'NO idea'),
    Unit('f',    'force', 'Newtons').generateVariant(),
    Unit('R',    'drag force', 'Newtons').generateVariant(),
    Unit('vlin', 'linear (tangential) velocity', 'meters/second').generateVariant(),
    Unit('ke',   'kinetic energy', 'Joules').generateVariant(),
    Unit('peg',  'potential energy due to gravity', 'Joules').generateVariant(),
    Unit('pes',  'potential energy in a spring', 'Joules').generateVariant(),
    Unit('pec',  'potential energy due to... the centripetal force?', 'Joules').generateVariant(),
    Unit('g',    'gravity acceleration', 'meters/second^2'),
    Unit('h',    'height', 'meters').generateVariant(),
    Unit('x',    'x', 'meters').generateVariant(),
    Unit('k',    'the spring\'s constant', 'Newtons/meter'),
    Unit('te',   'total energy', 'Joules').generateVariant(),
    Unit('ke',   'kenetic energy', 'Joules').generateVariant(),
    Unit('pe',   'potential energy', 'Joules').generateVariant(),
    Unit('T',    'Period', 'revolutions/second'),
    Unit('t',    'time', 'seconds'),
    Unit('pos',  'position', 'meters?').generateVariant(),
    Unit('mag',  'vector magnitude').generateVariant(),
    Unit('me',   "Mechanical Energy", 'Joules').generateVariant(),
    Unit('wdaf', '"Work Done Against Friction"').generateVariant(),
    Unit('P',    'Power', 'watts').generateVariant(),
    Unit('p',    'Momentum', 'kilogram meters/second').generateVariant(),
    Unit('ker',  'rotational kinetic energy', 'Joules').generateVariant(),
    Unit('d',    'displacement', 'meters').generateVariant(),
    Unit('D',    'distance', 'meters').generateVariant(),
    Unit('vec',  'generic position vector'),
    Unit('mu_k', 'coefficent of kinetic friction'),
    Unit('mu_s', 'coefficent of static friction'),
    Unit('N',    'Magnitude of the normal force', 'Newtons').generateVariant(),
    Unit('imp',  'Impulse', 'Newton seconds').generateVariant(),
    Unit('I',    'moment of inertia', 'kilogram meters^2').generateVariant(),
    Unit('f_avg','average force over time'),
    Unit('tau',  'torque', 'Newton meters').generateVariant(),
    Unit('kew',  'kinetic energy in a flywheel', 'Joules'),
    Unit('L',    'Angular Momentum', 'kilogram meters^2/second').generateVariant(),
    Unit('G',     'Gravitational Constant', 'Newtons * meters/kilograms^2'),
    Unit('v_esc', 'Escape velocity', 'meters/second', {'v_o', 'escv', 'esc_v'}),
    Unit('M_E',  'mass of the earth (or the body in question) (5.98*10^24 kg)', 'kilograms'),
    Unit('R_E',  'radius of the earth (or the body in question) (6.37*10^6 m)', 'meters'),
    Unit('M_S',  'Mass of the sun (or body in question)', 'kilograms'),
    Unit('sma',  'semi-major axis (smallest radius of an ellipse)', 'meters'),
    Unit('ma',  'major axis (largest radius of an ellipse)', 'meters'),
    # Unit(# 'f', 'frequency', 'Hertz'),
)

electronics = Namespace('electronics',
    Unit('v',        'voltage', 'volts').generateVariant(initial, final, time, primary, secondary, throughResistor, throughCapacitor, throughInductor, inMod, outMod, peak),
    Unit('i',        'current', 'amps').generateVariant(initial, final, time, primary, secondary, throughResistor, throughCapacitor, throughInductor, inMod, outMod, peak),
    Unit('r',        'resistance', 'ohms').generateVariant(time, primary, secondary, equivalent, throughCapacitor, throughInductor),
    Unit('p',        'power', 'watts').generateVariant(time, primary, secondary, equivalent, throughCapacitor, throughInductor, peak),
    Unit('G',        'conductance', 'Seimanns').generateVariant(time, primary, secondary, equivalent),
    Unit('Gn',       'conductance of a given resistor'),
    Unit('iGn',      'current through a given resistor'),
    Unit('vL',       'induced voltage', 'volts'),
    Unit('Av',       'Voltage Gain', 'volts'),
    Unit('C',        'capacitance', 'farads').generateVariant(initial, final, time, primary, secondary, throughCapacitor),
    Unit('q',        'charge').generateVariant(initial, final, time, primary, secondary, throughCapacitor),
    Unit('d',        'distance between the capacitor plates'),
    Unit('mu',       'permeability'),
    Unit('εr',       'relative permittivity for the medium'),
    Unit('ε0',       'permittivity of space (constant, equal to 8.854x10-12 F/m)'),
    Unit('w',        'energy', 'joules'),
    Unit('phi',      'magnetic flux', 'teslas (Webers / meter)'),
    Unit('t',        'time', 'seconds'),
    Unit('L',        'inductance', 'Henrys').generateVariant(initial, final, time, primary, secondary, throughInductor),
    Unit('N',        'number of turns of the wire'),
    Unit('W',        'Work', 'Joules'),
    Unit('tc',       'time constant'),
    Unit('vL_t',     'induced voltage at time t -- vL(t)'),
    Unit('v_t',      'voltage at time t -- v(t)'),
    Unit('i_t',      'current at time t -- i(t)'),
    Unit('f',        'frequency', 'Hertz'),
    Unit('ph',       'phase shift'),
    Unit('ohmega',   'angular frequency', 'radians/second', {'wThing'}),
    Unit('T',        'Period', 'revolutions/second'),
    Unit('j',        'i (sqrt(-1))'),
    Unit('phaseAng', 'the phase angle', 'radians'),
    Unit('Z',        'impedance').generateVariant(time, initial, final, primary, secondary, throughCapacitor, throughInductor, phasor),
    Unit('X',        'reactance').generateVariant(time, initial, final, primary, secondary, throughCapacitor, throughInductor, phasor),
    Unit('Y',        'admittance', 'Seimenns').generateVariant(time, initial, final, primary, secondary, throughCapacitor, throughInductor, phasor),
    Unit('B',        'suceptance', '1/reactance').generateVariant(time, initial, final, primary, secondary, throughCapacitor, throughInductor, phasor),
    Unit('phV_s',        'AC current source phasor'),
    # Unit('G',        'conductance').generateVariant(time, initial, final, primary, secondary, throughCapacitor, throughInductor, phasor),


    # 'Rf': 'the resistor connecting the op amp Vout and the op amp negative in terminals',
    # 'Rin': 'the resistor between Vin and the op amp negative in',
    # 'A': 'surface area of each capacitor plate',
)

waves = Namespace(
    Unit('y_t', 'the amplitude (y value) of the wave at time t'),
    Unit('t', 'time'),
    Unit('A', 'amplitude'),
    Unit('k', 'the wavenumber (spatial frequency)'),
    Unit('x', 'the x offset'),
    Unit('y', 'the y offset'),
    Unit('phi', 'phase angle'),
    Unit('k', 'wavenumber (spatial frequency)'),
    Unit('angF', 'angular frequency', psuedonyms={'ohmega', 'angf'}),
    Unit('f', 'frequency'),
    Unit('T', 'period'),
)

fundamentalMath = Namespace('math',
    Unit('c', 'circumerence of a circle'),
    Unit('r', 'radius'),
    Unit('A', 'area'),
)